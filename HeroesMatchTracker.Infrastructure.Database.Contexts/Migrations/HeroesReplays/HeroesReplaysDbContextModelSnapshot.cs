// <auto-generated />
using System;
using HeroesMatchTracker.Infrastructure.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeroesMatchTracker.Infrastructure.Database.Contexts.Migrations.HeroesReplays
{
    [DbContext(typeof(HeroesReplaysDbContext))]
    partial class HeroesReplaysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatch", b =>
                {
                    b.Property<long>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("TEXT");

                    b.Property<int>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MapId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("RandomValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayLengthTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplayVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ReplayId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayer", b =>
                {
                    b.Property<long>("MatchPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasActiveBoost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HeroLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAutoSelect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlizzardStaff")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoiceSilenced")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsWinner")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartySize")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PartyValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReplayPlayerPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchPlayerId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("ReplayPlayerPlayerId");

                    b.ToTable("ReplayMatchPlayers");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayerScoreResult", b =>
                {
                    b.Property<long>("MatchPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClutchHealsPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreepDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DamageSoaked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DamageTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EscapesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExperienceContribution")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Healing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HighestKillStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MercCampCaptures")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetaExperience")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinionDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinionKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Multikill")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OnFireTimeonFireTicks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OutnumberedDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PhysicalDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProtectionGivenToAllies")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegenGlobes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SelfHealing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiegeDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoloKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpellDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StructureDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SummonDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TakeDowns")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightDamageTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightEscapesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightHealingDone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightHeroDamage")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeCCdEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeRootingEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpentDeadTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeStunningEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TownKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VengeancesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WatchTowerCaptures")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchPlayerId");

                    b.ToTable("ReplayMatchPlayerScoreResults");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayOldPlayerInfo", b =>
                {
                    b.Property<long>("ReplayOldPlayerInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleTagName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReplayPlayerPlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplayOldPlayerInfoId");

                    b.HasIndex("ReplayPlayerPlayerId");

                    b.ToTable("ReplayOldPlayerInfos");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayPlayer", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleTagName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSeenBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortcutId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PlayerId");

                    b.ToTable("ReplayPlayers");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayPlayerToon", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProgramId")
                        .HasMaxLength(50)
                        .HasColumnType("INTEGER");

                    b.Property<int>("Realm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Region")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId");

                    b.HasIndex("Region", "ProgramId", "Realm", "Id");

                    b.ToTable("ReplayPlayerToons");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ServerReplayUpload", b =>
                {
                    b.Property<long>("ServerReplayUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServerName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UploadedTimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ServerReplayUploadId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ServerReplayUploads");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayer", b =>
                {
                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchPlayers")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayMatchPlayers")
                        .HasForeignKey("ReplayPlayerPlayerId");

                    b.Navigation("Replay");

                    b.Navigation("ReplayPlayer");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayerScoreResult", b =>
                {
                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayer", "ReplayMatchPlayer")
                        .WithOne("ReplayMatchPlayerScoreResult")
                        .HasForeignKey("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayerScoreResult", "MatchPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayMatchPlayer");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayOldPlayerInfo", b =>
                {
                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayOldPlayerInfos")
                        .HasForeignKey("ReplayPlayerPlayerId");

                    b.Navigation("ReplayPlayer");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayPlayerToon", b =>
                {
                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithOne("ReplayPlayerToon")
                        .HasForeignKey("HeroesMatchTracker.Shared.Entities.ReplayPlayerToon", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplayPlayer");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ServerReplayUpload", b =>
                {
                    b.HasOne("HeroesMatchTracker.Shared.Entities.ReplayMatch", "Replay")
                        .WithMany("ServerReplayUploads")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replay");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatch", b =>
                {
                    b.Navigation("ReplayMatchPlayers");

                    b.Navigation("ServerReplayUploads");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayMatchPlayer", b =>
                {
                    b.Navigation("ReplayMatchPlayerScoreResult");
                });

            modelBuilder.Entity("HeroesMatchTracker.Shared.Entities.ReplayPlayer", b =>
                {
                    b.Navigation("ReplayMatchPlayers");

                    b.Navigation("ReplayOldPlayerInfos");

                    b.Navigation("ReplayPlayerToon");
                });
#pragma warning restore 612, 618
        }
    }
}
