// <auto-generated />
using System;
using HeroesMatchTracker.Infrastructure.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HeroesReplays
{
    [DbContext(typeof(HeroesReplaysDbContext))]
    partial class HeroesReplaysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.8.20407.4");

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayHotsApiUpload", b =>
                {
                    b.Property<long>("ReplaysHotsApiUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReplayFileTimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayPlayerReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReplaysHotsApiUploadId");

                    b.HasIndex("ReplayPlayerReplayId");

                    b.ToTable("ReplayHotsApiUploads");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatch", b =>
                {
                    b.Property<long>("ReplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("TEXT");

                    b.Property<int>("GameMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MapId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("RandomValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayLengthTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReplayVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("ReplayId");

                    b.ToTable("Replays");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchAward", b =>
                {
                    b.Property<long>("MatchAwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AwardId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchAwardId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchAwards");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchDraftPick", b =>
                {
                    b.Property<long>("DraftPickId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroSelected")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PickType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReplayPlayerPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team")
                        .HasColumnType("INTEGER");

                    b.HasKey("DraftPickId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("ReplayPlayerPlayerId");

                    b.ToTable("ReplayMatchDraftPicks");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageEventType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageTarget")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReplayPlayerPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TimeStampTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("ReplayId");

                    b.HasIndex("ReplayPlayerPlayerId");

                    b.ToTable("ReplayMatchMessages");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayer", b =>
                {
                    b.Property<long>("MatchPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasActiveBoost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("HeroLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HeroName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAutoSelect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlizzardStaff")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoiceSilenced")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartySize")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PartyValue")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Team")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchPlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchPlayers");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerLoadout", b =>
                {
                    b.Property<long>("MatchPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnnouncerPackId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BannerId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MountAndMountTintId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SkinAndSkinTintId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SprayId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VoiceLineId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("MatchPlayerId");

                    b.ToTable("ReplayMatchPlayerLoadouts");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerScoreResult", b =>
                {
                    b.Property<long>("MatchPlayerScoreResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Assists")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClutchHealsPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreepDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DamageSoaked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DamageTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Deaths")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EscapesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExperienceContribution")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Healing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HeroDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HighestKillStreak")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MercCampCaptures")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MetaExperience")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinionDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MinionKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Multikill")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OnFireTimeonFireTicks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OutnumberedDeaths")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PhysicalDamage")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProtectionGivenToAllies")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RegenGlobes")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SelfHealing")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiegeDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SoloKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpellDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StructureDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SummonDamage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TakeDowns")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightDamageTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightEscapesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightHealingDone")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamfightHeroDamage")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeCCdEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeRootingEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpentDeadTicks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeStunningEnemyHeroesTicks")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TownKills")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VengeancesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WatchTowerCaptures")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchPlayerScoreResultId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchPlayerScoreResults");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerTalent", b =>
                {
                    b.Property<long>("MatchPlayerTalentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TalentId1")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId10")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId13")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId16")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId20")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId4")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TalentId7")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long?>("TimeSpanSelected10Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected13Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected16Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected1Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected20Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected4Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeSpanSelected7Ticks")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchPlayerTalentId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchPlayerTalents");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamBan", b =>
                {
                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Team0Ban0")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Team0Ban1")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Team0Ban2")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Team1Ban0")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Team1Ban1")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Team1Ban2")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ReplayId");

                    b.ToTable("ReplayMatchTeamBans");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamExperience", b =>
                {
                    b.Property<long>("MatchTeamExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0CreepXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0HeroXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0MinionXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0PassiveXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0StructureXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0TeamLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1CreepXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1HeroXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1MinionXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1PassiveXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1StructureXP")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1TeamLevel")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TimeTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchTeamExperienceId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchTeamExperiences");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamLevel", b =>
                {
                    b.Property<long>("MatchTeamLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplayId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team0Level")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Team1Level")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TeamTime0Ticks")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TeamTime1Ticks")
                        .HasColumnType("INTEGER");

                    b.HasKey("MatchTeamLevelId");

                    b.HasIndex("ReplayId");

                    b.ToTable("ReplayMatchTeamLevels");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayPlayer", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleTagId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BattleTagName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSeenBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Seen")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId");

                    b.ToTable("ReplayPlayers");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayPlayerToon", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Realm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Region")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId");

                    b.ToTable("ReplayPlayerToons");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayRenamedPlayer", b =>
                {
                    b.Property<long>("RenamedPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleTagName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RenamedPlayerId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("ReplayRenamedPlayers");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayHotsApiUpload", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "ReplayPlayer")
                        .WithMany("ReplayHotsApiUploads")
                        .HasForeignKey("ReplayPlayerReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchAward", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayMatchAwards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "ReplayMatch")
                        .WithMany("ReplayMatchAwards")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchDraftPick", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchDraftPicks")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany()
                        .HasForeignKey("ReplayPlayerPlayerId");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchMessage", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchMessages")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany()
                        .HasForeignKey("ReplayPlayerPlayerId");
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayer", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayMatchPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchPlayers")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerLoadout", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatchPlayer", "ReplayMatchPlayer")
                        .WithOne("ReplayMatchPlayerLoadout")
                        .HasForeignKey("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerLoadout", "MatchPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerScoreResult", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayMatchPlayerScoreResults")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchPlayerScoreResults")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchPlayerTalent", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithMany("ReplayMatchPlayerTalents")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchPlayerTalents")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamBan", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithOne("ReplayMatchTeamBans")
                        .HasForeignKey("HeroesMatchTracker.Core.Entities.ReplayMatchTeamBan", "ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamExperience", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchTeamExperiences")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayMatchTeamLevel", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayMatch", "Replay")
                        .WithMany("ReplayMatchTeamLevels")
                        .HasForeignKey("ReplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayPlayerToon", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithOne("ReplayPlayerToon")
                        .HasForeignKey("HeroesMatchTracker.Core.Entities.ReplayPlayerToon", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeroesMatchTracker.Core.Entities.ReplayRenamedPlayer", b =>
                {
                    b.HasOne("HeroesMatchTracker.Core.Entities.ReplayPlayer", "ReplayPlayer")
                        .WithOne("ReplayRenamedPlayer")
                        .HasForeignKey("HeroesMatchTracker.Core.Entities.ReplayRenamedPlayer", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
