<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:base="clr-namespace:HeroesParserData"
                    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">
    
    <SolidColorBrush x:Key="TooltipAndPopupBackgroundBrush" Color="#12112F" />
    <SolidColorBrush x:Key="TooltipAndPopupBorderBrush" Color="#998DBF" />
    <SolidColorBrush x:Key="TooltipAndPopupFontBrush" Color="#82A4EA" />
    <SolidColorBrush x:Key="TooltipAndPopupTitleFontBrush" Color="White" />

    <SolidColorBrush x:Key="MetroDataGrid.InactiveSelectionHighlightTextBrush" Color="Black"/>
    <!--Override default control styles-->
    <Style TargetType="ToolTip">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource TooltipAndPopupBorderBrush}" />
        <Setter Property="Background" Value="{StaticResource TooltipAndPopupBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource TooltipAndPopupFontBrush}" />
    </Style>

    <!--Talent Popups-->
    <Style TargetType="Border" x:Key="TalentDescPopupBorder">
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{StaticResource TooltipAndPopupBorderBrush}" />
    </Style>

    <Style TargetType="StackPanel" x:Key="TalentDescPopupStackPanel">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="330" />
        <Setter Property="Background" Value="{StaticResource TooltipAndPopupBackgroundBrush}" />
    </Style>

    <Style TargetType="Label" x:Key="TalentDescPopupLabelTitle">
        <Setter Property="Padding" Value="9,9,9,0" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Foreground" Value="{StaticResource TooltipAndPopupTitleFontBrush}" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TalentDescPopupLabelDescription">
        <Setter Property="Padding" Value="4,0,4,4" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Foreground" Value="{StaticResource TooltipAndPopupFontBrush}" />
    </Style>
    
    <!--DataGrid-->
    <Style TargetType="DataGridRow" x:Key="DefaultDataGridRow" BasedOn="{StaticResource MetroDataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="AliceBlue" />
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="Lavender" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DataGridRow" x:Key="MatchOverviewDataGridRow" BasedOn="{StaticResource MetroDataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding PortraitBackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            
            <!--  IsSelected  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Controls:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsSelected" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="LightSkyBlue" />
            </MultiTrigger>
            
            <!--  IsSelected and Selector.IsSelectionActive  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Controls:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding PortraitBackColor}" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <!--  IsSelected and Selector.IsSelectionActive  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Controls:DataGridRowHelper.SelectionUnit" Value="FullRow" />
                    <Condition Property="IsSelected" Value="false" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding PortraitBackColor}" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="DataGridRow" x:Key="SummaryDataGridRow" BasedOn="{StaticResource MetroDataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding RowBackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{Binding RowBackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DataGridRow" x:Key="SingleRowDataGrid" BasedOn="{StaticResource MetroDataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="Honeydew"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Background" Value="LightSkyBlue" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="DataGridCell" x:Key="PortraitBackColor">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{Binding PortraitBackColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="DataGridCell" x:Key="HighestSiegeFont" BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="{Binding HighestSiegeFont}"/>
    </Style>
    <Style TargetType="DataGridCell" x:Key="HighestHeroDamageFont" BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="{Binding HighestHeroDamageFont}"/>
    </Style>
    <Style TargetType="DataGridCell" x:Key="HighestExpFont" BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="{Binding HighestExpFont}"/>
    </Style>

    <Style TargetType="DataGridCell" x:Key="DataGridCenterCell" BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
    </Style>

    <Style TargetType="DataGridColumnHeader" x:Key="DataGridCenterHeader" BasedOn="{StaticResource MetroDataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
    </Style>

    <Style TargetType="DataGrid" x:Key="DefaultDataGrid" BasedOn="{StaticResource MetroDataGrid}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="EnableColumnVirtualization" Value="True" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
    </Style>

    <Style TargetType="DataGrid" x:Key="MatchListDataGrid" BasedOn="{StaticResource MetroDataGrid}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="EnableColumnVirtualization" Value="True" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="GridLinesVisibility" Value="Vertical" />
    </Style>

    <Style TargetType="DataGrid" x:Key="StatisticsHeroesDataGrid" BasedOn="{StaticResource DefaultDataGrid}">
        <Setter Property="Margin" Value="10,10,10,0" />
        <Setter Property="GridLinesVisibility" Value="Vertical" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    
    <!--Rotated Datagrid-->
    <Style TargetType="DataGridCell" x:Key="RotatedDataGridCell" BasedOn="{StaticResource MetroDataGridCell}">
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <RotateTransform Angle="-90" />
                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
    </Style>
    <Style TargetType="DataGridColumnHeader" x:Key="RotatedDataGridColumnHeader" BasedOn="{StaticResource MetroDataGridColumnHeader}">
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <RotateTransform Angle="-90" />
                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
    </Style>
    <Style TargetType="DataGridRowHeader" x:Key="RotatedDataGridRowHeader" BasedOn="{StaticResource MetroDataGridRowHeader}">
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <RotateTransform Angle="-90" />
                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
    </Style>

    <Style TargetType="DataGridColumnHeader" x:Key="MatchAdvNoneDataGridColumnHeader" BasedOn="{StaticResource RotatedDataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="AliceBlue" />
        <Setter Property="Background" Value="AliceBlue" />
    </Style>
    
    <Style TargetType="DataGridColumnHeader" x:Key="MatchAdvThickDataGridColumnHeader" BasedOn="{StaticResource RotatedDataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0,0,0,3"/>
        <Setter Property="BorderBrush" Value="SlateBlue" />
        <Setter Property="Background" Value="Lavender" />
    </Style>
    
    <Style TargetType="DataGridColumnHeader" x:Key="MatchAdvDataGridColumnHeader" BasedOn="{StaticResource RotatedDataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Background" Value="AliceBlue" />
    </Style>

    <Style TargetType="DataGridCell" x:Key="MatchAdvNoneDataGridCell" BasedOn="{StaticResource RotatedDataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border BorderThickness="0">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="DataGridCell" x:Key="MatchAdvThickDataGridCell" BasedOn="{StaticResource RotatedDataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border BorderThickness="0,0,0,3" BorderBrush="SlateBlue" Background="Lavender">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Border" x:Key="BorderBackgroundColor">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{Binding RowBackColor}" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DataGridCell" x:Key="MatchAdvDataGridCell" BasedOn="{StaticResource RotatedDataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource GrayBrush5}" Style="{StaticResource BorderBackgroundColor}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Expanders-->
    <Style TargetType="Expander" x:Key="SummaryControlExpander" BasedOn="{StaticResource MetroExpander}">
        <Setter Property="Margin" Value="10,10,0,0"/>
    </Style>

    <Style TargetType="Expander" x:Key="InnerSummaryControlExpander" BasedOn="{StaticResource MetroExpander}">
        <Setter Property="Margin" Value="5,5"/>
    </Style>

    <Style TargetType="Expander" x:Key="InnerTabItemExpander" BasedOn="{StaticResource MetroExpander}">
        <Setter Property="Margin" Value="10,10,10,0"/>
    </Style>
    
    <!--buttons-->
    <Style TargetType="Button" x:Key="MatchSummaryReplayLeftChangeButton">
        <Setter Property="Background" Value="{DynamicResource LeftNormalArrow}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Source="{DynamicResource LeftArrowNormal}" Width="80" Height="163"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource LeftArrowHover}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource LeftArrowDown}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource LeftArrowDisabled}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="MatchSummaryReplayRightChangeButton">
        <Setter Property="Background" Value="{DynamicResource LeftNormalArrow}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Source="{DynamicResource RightArrowNormal}" Width="80" Height="163"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource RightArrowHover}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource RightArrowDown}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Image Source="{DynamicResource RightArrowDisabled}" Width="80" Height="163"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Other-->
    <Style TargetType="Label" x:Key="HomeLabelTheme" BasedOn="{StaticResource MetroLabel}">
        <Style.Resources>
            <DropShadowEffect x:Key="HomeFontTheme" BlurRadius="15" ShadowDepth="2" Opacity="0.8" Color="{Binding LabelGlowColor}"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="24"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Effect" Value="{StaticResource HomeFontTheme}"></Setter>
    </Style>

    <Style TargetType="CheckBox" x:Key="SettingsCheckBoxTheme" BasedOn="{StaticResource MetroCheckBox}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
    </Style>

    <Style TargetType="Label" x:Key="SettingsLabelTheme" BasedOn="{StaticResource MetroLabel}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
    </Style>

    <Style TargetType="ComboBox" x:Key="HomeComboBoxTheme" BasedOn="{StaticResource MetroComboBox}">
        <Style.Resources>
            <DropShadowEffect x:Key="HomeFontTheme" BlurRadius="15" ShadowDepth="2" Opacity="0.8" Color="{Binding LabelGlowColor}"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontSize" Value="24"></Setter>
        <Setter Property="VerticalAlignment" Value="Top"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="Effect" Value="{StaticResource HomeFontTheme}"></Setter>
    </Style>

    <Style TargetType="ComboBox" x:Key="StatsComboBoxTheme" BasedOn="{StaticResource HomeComboBoxTheme}">
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="Background" Value="White"></Setter>
    </Style>

    <Style TargetType="Border" x:Key="InnerTabItemBorder">
        <Setter Property="BorderBrush" Value="SlateBlue"/>
        <Setter Property="BorderThickness" Value="0,2,0,0"/>
    </Style>
    
</ResourceDictionary>